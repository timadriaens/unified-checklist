[
["index.html", "National, unified checklist of alien species in Belgium 1 Intro", " National, unified checklist of alien species in Belgium Peter Desmet, Damiano Oldoni 2018-10-31 1 Intro … "],
["get_taxa.html", "2 Get taxa from checklists 2.1 Choose checklists 2.2 Get taxa 2.3 Filter on distribution 2.4 Get GBIF backbone taxonomy information 2.5 Show summary and save", " 2 Get taxa from checklists In this chapter we select species checklists and retrieve the taxa they contain. Load libraries: library(tidyverse) # To do data science library(here) # To find files library(janitor) # To clean input data library(digest) # To generate hashes library(rgbif) # To use GBIF services library(trias) # To use functions developed for TrIAS 2.1 Choose checklists The unified checklist is compiled from species checklists published to GBIF under the TrIAS project. Here we choose the checklists we want to include and rank them by trust (most trustworthy first). The ranking will help to choose between duplicate taxa in later steps. Choose checklists: checklist_keys &lt;- c( &quot;9ff7d317-609b-4c08-bd86-3bc404b77c42&quot;, # alien-plants-belgium &quot;289244ee-e1c1-49aa-b2d7-d379391ce265&quot;, # alien-macroinvertebrates &quot;98940a79-2bf1-46e6-afd6-ba2e85a26f9f&quot;, # alien-fishes-checklist &quot;b043c480-dd36-4f4f-aa82-e188753ff09d&quot;, # uredinales-belgium-checklist &quot;1f3505cd-5d98-4e23-bd3b-ffe59d05d7c2&quot;, # ad-hoc-checklist &quot;1738f272-6b5d-4f43-9a92-453a8c5ea50a&quot;, # rinse-pathways-checklist &quot;3f5e930b-52a5-461d-87ec-26ecd66f14a3&quot; # rinse-registry-checklist ) Get metadata for these checklists from GBIF: checklists &lt;- map(checklist_keys, function(x) rgbif::datasets(uuid = x)) %&gt;% map_df(function(x) list( datasetKey = x$data$key, title = x$data$title, modified = x$data$modified, publisher = x$data$publishingOrganizationKey, doi = x$data$doi )) Show metadata to ensure we have the correct checklists: checklists Save to CSV: write_csv(checklists, here(&quot;data&quot;, &quot;raw&quot;, &quot;checklists.csv&quot;), na = &quot;&quot;) 2.2 Get taxa Get taxa from these checklists from GBIF. Note: here we get checklist taxa, not GBIF backbone taxa. taxa &lt;- map_df(checklists$datasetKey, function(x) name_usage( datasetKey = x, limit = 99999, # Should be more than total taxa for all checklists return = &quot;data&quot; )) %&gt;% filter(origin == &quot;SOURCE&quot;) # Keep only source taxa, not denormed higher classification taxa Select columns of interest, rename key to taxonKey and sort by taxonKey: taxa &lt;- taxa %&gt;% select(key, scientificName, taxonID, datasetKey, nameType, issues, nubKey) %&gt;% rename(taxonKey = key) %&gt;% arrange(taxonKey) Convert the column issues from a list to a concatenated string: taxa &lt;- taxa %&gt;% group_by_at(vars(-issues)) %&gt;% summarize(issues = str_c(issues, collapse = &quot;,&quot;)) %&gt;% ungroup() %&gt;% mutate( issues = na_if(issues, &quot;NULL&quot;), issues = na_if(issues, &quot;NA&quot;) ) Preview checklist taxa: taxa %&gt;% head() 2.3 Filter on distribution TrIAS checklists can contain more than alien species in Belgium. We therefore need to filter on the associated distribution information (using the trias::has_distribution() function) as follows: In Belgium: country(code) = BE Present: occurrenceStatus status = PRESENT, COMMMON, RARE OR IRREGULAR Introduced: establishmentMeans = INTRODUCED, NATURALISED, INVASIVE OR ASSISTED COLONISATION Note: we filter on distribution information of checklist taxa, not GBIF backbone taxa. That is because backbone taxa contain distribution information from TrIAS checklists and other checklists, which we don’t want to consider here. E.g. compare: Distributions for checklist taxon Eriocheir sinensis (140563012) Distributions for backbone taxon Eriocheir sinensis (2225776) Get distribution information from GBIF and check if these meet the filter criteria. The result (TRUE/FALSE) is inserted as an extra column validDistribution: progress_bar &lt;- progress_estimated(nrow(taxa)) taxa &lt;- taxa %&gt;% mutate(validDistribution = map_lgl(taxa$taxonKey, function(x) { progress_bar$tick()$print() trias::gbif_has_distribution( taxon_key = x, country = &quot;BE&quot;, establishmentMeans = c(&quot;INTRODUCED&quot;, &quot;NATURALISED&quot;, &quot;INVASIVE&quot;, &quot;ASSISTED COLONISATION&quot;), status = c(&quot;PRESENT&quot;, &quot;COMMON&quot;, &quot;RARE&quot;, &quot;IRREGULAR&quot;) ) })) Preview some taxa with not a single valid distribution (taxonKey can be used to verify manually on GBIF): taxa %&gt;% filter(!validDistribution) %&gt;% head() Rename nubKey to bb_key and move to the end: taxa &lt;- taxa %&gt;% rename(bb_key = nubKey) %&gt;% select(-bb_key, everything()) 2.4 Get GBIF backbone taxonomy information A taxon can occur on more than one checklist. To identify these duplicates, we cannot rely on the scientific name as there might be spelling variations (e.g. with or without authorship) and it does not account for synonyms that should be lumped with the accepted taxon. To have unifying taxon identifiers across taxa, we rely on the GBIF backbone taxonomy, to which every checklist taxon (re)published to GBIF is automatically matched. If a match in the backbone is found, the checklist taxon will have a nubKey. Filter taxa on having valid distribution and nubKey and create vector of unique nubKeys: nub_keys &lt;- taxa %&gt;% filter(validDistribution) %&gt;% filter(is.finite(bb_key)) %&gt;% select(bb_key) %&gt;% distinct(bb_key) %&gt;% pull() Get GBIF backbone taxonomy information: progress_bar &lt;- progress_estimated(length(nub_keys)) backbone_info &lt;- map_dfr(nub_keys, function(x) { progress_bar$tick()$print() rgbif::name_usage( key = x, return = &quot;data&quot; ) }) Select columns of interest: backbone_info &lt;- backbone_info %&gt;% select( &quot;key&quot;, &quot;scientificName&quot;, &quot;species&quot;, &quot;genus&quot;, &quot;family&quot;, &quot;order&quot;, &quot;class&quot;, &quot;phylum&quot;, &quot;kingdom&quot;, &quot;rank&quot;, &quot;speciesKey&quot;, &quot;taxonomicStatus&quot;, &quot;acceptedKey&quot;, &quot;accepted&quot; ) Remove duplicates (caused by this bug): backbone_info &lt;- backbone_info %&gt;% distinct() Rename accepted to acceptedName: backbone_info &lt;- backbone_info %&gt;% rename(acceptedName = accepted) Add prefix bb_ to column names: colnames(backbone_info) &lt;- paste0(&quot;bb_&quot;, colnames(backbone_info)) Merge backbone information with checklist taxa: taxa &lt;- taxa %&gt;% left_join( backbone_info, by = &quot;bb_key&quot; ) Preview merged information: taxa %&gt;% head() 2.5 Show summary and save Show summary per checklist: taxa %&gt;% left_join(checklists, by = &quot;datasetKey&quot;) %&gt;% group_by(title) %&gt;% summarize( taxa = n(), valid_dist_in_backbone = sum(validDistribution &amp; !is.na(bb_key)), invalid_distribution = sum(!validDistribution), not_in_backbone = sum(validDistribution &amp; is.na(bb_key)) ) %&gt;% adorn_totals(&quot;row&quot;) Save to CSV: write_csv(taxa, here(&quot;data&quot;, &quot;raw&quot;, &quot;taxa.csv&quot;), na = &quot;&quot;) "],
["get_information.html", "3 Get related information 3.1 Read data 3.2 Filter checklist taxa 3.3 Get distributions 3.4 Get species profiles 3.5 Get descriptions", " 3 Get related information In this chapter we retrieve related information for taxa on the checklists (with a valid distribution). Load libraries: library(tidyverse) # To do data science library(here) # To find files library(janitor) # To clean input data library(digest) # To generate hashes library(rgbif) # To use GBIF services library(trias) # To use functions developed for TrIAS 3.1 Read data taxa &lt;- read_csv(here(&quot;data&quot;, &quot;raw&quot;, &quot;taxa.csv&quot;)) 3.2 Filter checklist taxa Important: if a checklist has related information for a taxon, but not a valid distribution, that related information will NOT be included in the unified checklist. This is to exclude related information about a taxon for which the checklist did not even consider a Belgian scope (e.g. pathway). taxon_keys &lt;- taxa %&gt;% filter(validDistribution) %&gt;% pull(taxonKey) 3.3 Get distributions progress_bar &lt;- progress_estimated(length(taxon_keys)) distributions &lt;- map_dfr(taxon_keys, function(x) { progress_bar$tick()$print() rgbif::name_usage( key = x, return = &quot;data&quot;, data = &quot;distribution&quot; ) }) Save to CSV: write_csv(distributions, here(&quot;data&quot;, &quot;raw&quot;, &quot;distributions.csv&quot;), na = &quot;&quot;) 3.4 Get species profiles progress_bar &lt;- progress_estimated(length(taxon_keys)) speciesprofiles &lt;- map_dfr(taxon_keys, function(x) { progress_bar$tick()$print() rgbif::name_usage( key = x, return = &quot;data&quot;, data = &quot;speciesProfiles&quot; ) }) Save to CSV: write_csv(speciesprofiles, here(&quot;data&quot;, &quot;raw&quot;, &quot;speciesprofiles.csv&quot;), na = &quot;&quot;) 3.5 Get descriptions progress_bar &lt;- progress_estimated(length(taxon_keys)) descriptions &lt;- map_dfr(taxon_keys, function(x) { progress_bar$tick()$print() rgbif::name_usage( key = x, return = &quot;data&quot;, data = &quot;description&quot; ) }) Save to CSV: write_csv(descriptions, here(&quot;data&quot;, &quot;raw&quot;, &quot;descriptions.csv&quot;), na = &quot;&quot;) "],
["unify_information.html", "4 Unify related information 4.1 Read data 4.2 Assign checklist order 4.3 Unify distribution 4.4 Unify species profiles 4.5 Unify descriptions", " 4 Unify related information In this chapter we unify related information for each verified taxon. Load libraries: library(tidyverse) # To do data science library(here) # To find files library(janitor) # To clean input data library(digest) # To generate hashes library(rgbif) # To use GBIF services library(trias) # To use functions developed for TrIAS 4.1 Read data checklists &lt;- read_csv(here(&quot;data&quot;, &quot;raw&quot;, &quot;checklists.csv&quot;)) taxa &lt;- read_csv(here(&quot;data&quot;, &quot;raw&quot;, &quot;taxa.csv&quot;)) distributions &lt;- read_csv(here(&quot;data&quot;, &quot;raw&quot;, &quot;distributions.csv&quot;)) speciesprofiles &lt;- read_csv(here(&quot;data&quot;, &quot;raw&quot;, &quot;speciesprofiles.csv&quot;)) descriptions &lt;- read_csv(here(&quot;data&quot;, &quot;raw&quot;, &quot;descriptions.csv&quot;)) 4.2 Assign checklist order Get checklist keys (in order): checklist_keys &lt;- checklists %&gt;% pull(datasetKey) Assign checklist order column to taxa: taxa &lt;- taxa %&gt;% rowwise() %&gt;% mutate(checklistOrder = which(checklist_keys == datasetKey)[1]) TO REMOVE # Temporarily use the bb_key as a unifying key taxa &lt;- taxa %&gt;% rename(verifiedKey = bb_key) 4.3 Unify distribution Parse temporal (eventDate) information: distributions_unified &lt;- distributions %&gt;% # Split temporal on &quot;/&quot; into startYear and endYear # If temporal only contains a single year, then endYear will be empty separate( temporal, into = c(&quot;startYear&quot;, &quot;endYear&quot;), sep = &quot;/&quot;, remove = FALSE, convert = TRUE, extra = &quot;drop&quot;, fill = &quot;right&quot; ) %&gt;% # Only keep the first 4 characters: 1968-11-21 -&gt; 1968 mutate(startYear = str_sub(startYear, 1, 4), endYear = str_sub(endYear, 1, 4)) %&gt;% # If endYear is empty (no range), populate it with startYear: 2018 &amp; 2018 mutate(endYear = if_else(is.na(endYear), startYear, endYear)) Filter distributions: distributions_unified &lt;- distributions_unified %&gt;% # Filter on non-native species present in (at least part of) Belgium filter( country == &quot;BE&quot; &amp; establishmentMeans %in% c(&quot;INTRODUCED&quot;, &quot;NATURALISED&quot;, &quot;INVASIVE&quot;, &quot;ASSISTED COLONISATION&quot;) &amp; status %in% c(&quot;PRESENT&quot;, &quot;COMMON&quot;, &quot;RARE&quot;, &quot;IRREGULAR&quot;) ) Choose a single distribution within a checklist: distributions_unified &lt;- distributions_unified %&gt;% # Join distribution with taxon to get verifiedKey and checklistOrder left_join(taxa, on = taxonKey) %&gt;% # Remove records that have no verifiedKey (e.g. one wasn&#39;t assigned yet) filter(!is.na(verifiedKey)) %&gt;% # Group by verifiedKey within checklist group_by( datasetKey, checklistOrder, verifiedKey ) %&gt;% # Take earliest year, latest year and note taxonIDs summarize( startYear = min(startYear, na.rm = TRUE), endYear = max(endYear, na.rm = TRUE), sourceTaxa = paste(sort(unique(taxonKey)), collapse = &quot;,&quot;) ) Choose a single distribution across checklists: distributions_unified &lt;- distributions_unified %&gt;% # Sort by checklist order (trustworthiness) arrange(checklistOrder) %&gt;% # Group by verifiedKey across checklists group_by(verifiedKey) %&gt;% # Select year of most trustworthy checklist (first one) # and note that checklist and its taxonKey(s) summarize( startYear = first(startYear), lastYear = first(endYear), sourceChecklist = first(datasetKey), sourceTaxa = first(sourceTaxa) ) %&gt;% # Sort by verifiedKey arrange(verifiedKey) Save to CSV: write_csv(distributions_unified, here(&quot;data&quot;, &quot;unified&quot;, &quot;distributions.csv&quot;), na = &quot;&quot;) 4.4 Unify species profiles Filter species profiles: speciesprofiles_unified &lt;- speciesprofiles %&gt;% # Remove species profiles that contain NA for any of the attributes # This is rare: normally all attributes are populated or there just isn&#39;t a # species profile for that species filter( !is.na(marine) &amp; !is.na(freshwater) &amp; !is.na(terrestrial) ) Choose a single species profile within a checklist: speciesprofiles_unified &lt;- speciesprofiles_unified %&gt;% # Join species profile with taxon to get verifiedKey and checklist order left_join(taxa, on = taxonID) %&gt;% # Remove records that have no verifiedKey (e.g. one wasn&#39;t assigned yet) filter(!is.na(verifiedKey)) %&gt;% # Group by verifiedKey within checklist group_by( datasetKey, checklistOrder, verifiedKey ) %&gt;% # Take first species profile and note taxonKey summarize( marine = first(marine), freshwater = first(freshwater), terrestrial = first(terrestrial), sourceTaxon = first(taxonKey) ) Choose a single species profile across checklists: speciesprofiles_unified &lt;- speciesprofiles_unified %&gt;% # Sort by checklist order (trustworthiness) arrange(checklistOrder) %&gt;% # Group by verifiedKey across checklists group_by(verifiedKey) %&gt;% # Select species profile of most trustworthy checklist (first one) # and note that checklist and its taxonID summarize( marine = first(marine), freshwater = first(freshwater), terrestrial = first(terrestrial), sourceChecklist = first(datasetKey), sourceTaxon = first(sourceTaxon) ) %&gt;% # Sort by verifiedKey arrange(verifiedKey) Save to CSV: write_csv(speciesprofiles_unified, here(&quot;data&quot;, &quot;unified&quot;, &quot;speciesprofiles.csv&quot;), na = &quot;&quot;) 4.5 Unify descriptions Filter descriptions: descriptions_unified &lt;- descriptions %&gt;% # Filter on non-NA descriptions filter( !is.na(description) ) Select unique descriptions (within their type) within a checklist: descriptions_unified &lt;- descriptions_unified %&gt;% # Join species profile with taxon to get verifiedKey and checklist order left_join(taxa, on = taxonKey) %&gt;% # Remove records that have no verifiedKey (e.g. one wasn&#39;t assigned yet) filter(!is.na(verifiedKey)) %&gt;% # Group by type and verifiedKey within checklist group_by( datasetKey, checklistOrder, verifiedKey, type ) %&gt;% # Choose distinct value for that type and verifiedKey # If identical values exist within that grouping, distinct() will take # most trustworthy (first one) # Note: since we use distinct we can&#39;t keep a sourceTaxon (taxonKey) distinct( description ) Select unique descriptions (within their type) across checklists: descriptions_unified &lt;- descriptions_unified %&gt;% # Sort by checklist order (trustworthiness) arrange(checklistOrder) %&gt;% # Group by type and verifiedKey across checklists group_by( type, verifiedKey ) %&gt;% # Choose distinct value for that type and verifiedKey distinct( description, .keep_all = TRUE ) %&gt;% # Move verifiedKey to beginning and drop checklist_order select(verifiedKey, everything(), -checklistOrder) %&gt;% # Rename checklist rename(sourceChecklist = datasetKey) %&gt;% # Sort by verifiedKey and type arrange(verifiedKey, type) Save to CSV: write_csv(descriptions_unified, here(&quot;data&quot;, &quot;unified&quot;, &quot;descriptions.csv&quot;), na = &quot;&quot;) "]
]
